


tabulation


class Solution {
    public int uniquePathsWithObstacles(int[][] obstacleGrid) {
        if (obstacleGrid[0][0] == 1) return 0;

        int m = obstacleGrid.length;
        int n = obstacleGrid[0].length;

        int[][] dp = new int[m][n];

        for (int i = 0; i < m; i++) {
            for (int j = 0; j < n; j++) {
                if (obstacleGrid[i][j] == 1) {
                    dp[i][j] = 0;  
                } else {
                    if (i == 0 && j == 0) {
                        dp[i][j] = 1;  
                    } else {
                        if (i > 0) dp[i][j] += dp[i - 1][j];  
                        if (j > 0) dp[i][j] += dp[i][j - 1]; 
                    }
                }
            }
        }

        return dp[m - 1][n - 1];
    }
}


//memoisation

class Solution {
    public int uniquePathsWithObstacles(int[][] a) {
        int n = a.length;
        int m = a[0].length;
        int[][] dp = new int[n][m];
        for(int[] i : dp){
            Arrays.fill(i,-1);
        }
        return find(a,n-1,m-1,dp);
    }
    static int find(int[][] a,int i , int j , int[][] dp){
        if(i<0 || j<0 || a[i][j]==1) return 0;
          if (i == 0 && j == 0) {
            return 1;
        }
        if (dp[i][j] != -1) {
            return dp[i][j];
        }
         int pathsFromAbove = find(a, i - 1, j, dp);
        int pathsFromLeft = find(a, i, j - 1, dp);

        dp[i][j] = pathsFromAbove + pathsFromLeft;

        return dp[i][j];

    }
}