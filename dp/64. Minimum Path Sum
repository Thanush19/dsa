tabulation

class Solution {
    public int minPathSum(int[][] grid) {
        int n = grid.length;
        int m = grid[0].length;
        int[][] dp = new int[n][m];
        dp[0][0] = grid[0][0];

        for (int j = 1; j < m; j++) {
            dp[0][j] = dp[0][j - 1] + grid[0][j];
        }

        for (int i = 1; i < n; i++) {
            dp[i][0] = dp[i - 1][0] + grid[i][0];
        }

        for (int i = 1; i < n; i++) {
            for (int j = 1; j < m; j++) {
                dp[i][j] = grid[i][j] + Math.min(dp[i - 1][j], dp[i][j - 1]);
            }
        }

        return dp[n - 1][m - 1];
    }
    
}


recursion


class Solution {
    public int minPathSum(int[][] grid) {
        int n = grid.length;
        int m = grid[0].length;
        int[][] dp = new int[n][m];

        for (int[] r : dp) {
            Arrays.fill(r, -1);
        }

        return find(grid, dp, n - 1, m - 1);
    }

    static int find(int[][] grid, int[][] dp, int i, int j) {
        if (i == 0 && j == 0) {
            return grid[i][j];
        }

        if (dp[i][j] != -1) {
            return dp[i][j];
        }

        int left = (j - 1 >= 0) ? find(grid, dp, i, j - 1) : Integer.MAX_VALUE;
        int top = (i - 1 >= 0) ? find(grid, dp, i - 1, j) : Integer.MAX_VALUE;

        dp[i][j] = grid[i][j] + Math.min(left, top);

        return dp[i][j];
    }
}
